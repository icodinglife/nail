group 'com.nail'
version '1.0-SNAPSHOT'

buildscript {
//    ext.kotlin_version = '1.2.21'
    ext.quasar_version = '0.7.7'
    ext.quasar_jdk_version = ':jdk8'
    ext.springboot_version = '1.5.10.RELEASE'
    ext.grpc_version = '1.9.0'
    ext.protobuf_plugin_version = '0.8.3'
    ext.protoc_version = '3.5.1-1'
    ext.commons_lang3_version = '3.7'
    ext.fastjson_version = '1.2.46'
    ext.kryo_version = '4.0.1'
    ext.zk_curator_version = '4.0.0'

    repositories {
        mavenCentral()
    }
    dependencies {
//        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springboot_version}")
        classpath("com.google.protobuf:protobuf-gradle-plugin:${protobuf_plugin_version}")
    }
}

apply plugin: 'idea'
apply plugin: 'java'
//apply plugin: 'kotlin'
apply plugin: 'application'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.google.protobuf'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

configurations {
    quasar
}

dependencies {
    // kotlin
//    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    // quasar
    compile "co.paralleluniverse:quasar-core:$quasar_version$quasar_jdk_version"
    compile "co.paralleluniverse:quasar-actors:$quasar_version"

    // spring boot
    compile 'org.springframework.boot:spring-boot-starter'

    // quasar runtime plugin
    quasar "co.paralleluniverse:quasar-core:$quasar_version$quasar_jdk_version@jar"

    // kryo
    compile "com.esotericsoftware:kryo:${kryo_version}"

    // fast-json
    compile "com.alibaba:fastjson:${fastjson_version}"

    // common utils
    compile "org.apache.commons:commons-lang3:${commons_lang3_version}"

    // grpc
    compile "io.grpc:grpc-netty:${grpc_version}"
    compile "io.grpc:grpc-protobuf:${grpc_version}"
    compile "io.grpc:grpc-stub:${grpc_version}"

    // zk client curator
    compile "org.apache.curator:curator-recipes:${zk_curator_version}"
}

//compileKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}
//compileTestKotlin {
//    kotlinOptions.jvmTarget = "1.8"
//}

sourceSets {
    main {
        proto {
            srcDir 'src/main/java/com/nail/core/transport/proto'
        }
        java {
            srcDirs 'src/main/java'
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protoc_version}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpc_version}"
        }
    }
    generateProtoTasks.generatedFilesBaseDir = 'src'
//    generateProtoTasks {
//        all()*.plugins {
//            grpc {}
//        }
//    }
}

mainClassName = "com.nail.App"

if (project.hasProperty('method')) {
    apply from: "${project.hasProperty('method')}.gradle"
} else {
    apply from: "agent.gradle"
}